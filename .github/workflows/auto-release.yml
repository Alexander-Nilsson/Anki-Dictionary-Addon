name: Auto Release

on:
  push:
    branches: [master]
    # Trigger on every push to master (including merges)

env:
  PYTHON_VERSION: '3.13'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    # Only run on merge commits (when PRs are merged)
    if: contains(github.event.head_commit.message, 'Merge pull request') || contains(github.event.head_commit.message, 'Merge branch')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Get current version and bump
      id: version
      run: |
        # Get current version from pyproject.toml
        CURRENT_VERSION=$(python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            config = tomllib.load(f)
        print(config['project']['version'])
        " 2>/dev/null || echo "0.1.0")
        
        echo "Current version: $CURRENT_VERSION"
        
        # Simple patch version bump (0.1.0 -> 0.1.1)
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update version in pyproject.toml
      run: |
        python -c "
        import tomllib
        import re
        
        # Read current file
        with open('pyproject.toml', 'r') as f:
            content = f.read()
        
        # Replace version
        new_content = re.sub(
            r'version = \"[^\"]+\"',
            f'version = \"${{ steps.version.outputs.version }}\"',
            content
        )
        
        # Write back
        with open('pyproject.toml', 'w') as f:
            f.write(new_content)
        "

    - name: Build addon
      run: |
        python build.py all

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: "Anki Dictionary Addon v${{ steps.version.outputs.version }}"
        body: |
          ## ðŸŽ‰ New Release v${{ steps.version.outputs.version }}
          
          **Changes in this release:**
          - ${{ github.event.head_commit.message }}
          
          **Installation:**
          1. Download the `.ankiaddon` file below
          2. Open Anki
          3. Go to Tools â†’ Add-ons â†’ Install from file
          4. Select the downloaded file
          
          **Files:**
          - ðŸ“¦ `anki_dictionary_addon_v${{ steps.version.outputs.version }}.ankiaddon` - Main addon file
        files: |
          build/*.ankiaddon
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add pyproject.toml
        git commit -m "chore: bump version to ${{ steps.version.outputs.version }} [skip ci]" || echo "No changes to commit"
        git push || echo "Nothing to push"
